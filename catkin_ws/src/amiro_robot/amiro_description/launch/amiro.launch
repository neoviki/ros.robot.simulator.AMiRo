<?xml version="1.0"?>
<launch>

  <arg name="update_rate" default="50.0"/> <!-- (1/s) Update rate for tfs and gazebo plugins (not sensor updates) -->
  <arg name="robot_name" default="amiro" /> <!-- Robot and tf prefix name -->
  <arg name="use_gazebo" default="1" /> <!-- Where does the joint information comes from (Gazebo:true or dummy:false)? -->
  <arg name="robot_position" default="-x 0.0 -y 0.0 -z 0.0 -R 0 -P 0 -Y 0" /> <!-- Robot initial position in Gazebo -->
  <arg name="robot_model" default="amiro.xacro" /> <!-- Robot model filename -->
  <arg name="use_mesh_model" default="true" /> <!-- Use the AMiRo model mesh instead of primitives -->
  <arg name="lid_sensor_pitch" default="0.0" /> <!-- (rad) If the robot has a sensor on the lid, it will be tilted by this angle -->
  <arg name="rfid_yaml_file" default="$(find amiro_gazebo)/yaml/rfid_assembly_line.yaml" /> <!-- RFID mockup -->
  <arg name="rfid_max_tag_distance_m" default="0.1" /> <!-- Maximum range of detecting an RFID tag -->
  <arg name="use_odom_to_world_tf" default="true" /> <!--  tf between the world and the odom frame of the robot (so that they coinside) -->
  
  <!-- Sensor Mockups -->
  <!-- NOTE: proximity sensors come with amiro_basic.xacro -->
  <arg name="enable_proximity_floor_mockup" default="false" />
  <arg name="enable_proximity_ring_mockup" default="false" />
  <arg name="enable_rfid_mockup" default="false" />

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find amiro_description)/urdf/$(arg robot_model)' update_rate:=$(arg update_rate) lid_sensor_pitch:=$(arg lid_sensor_pitch) use_mesh_model:=$(arg use_mesh_model) use_gazebo:=$(arg use_gazebo)"/>

  <!--Send non-fixed joint states to the /joint_states topic-->
  <group if="$(arg use_gazebo)">
    <!-- Run a python script to send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model $(arg robot_name) -param robot_description $(arg robot_position) "/>
    <node if="$(arg use_odom_to_world_tf)" name="$(arg robot_name)_world_odom_tf"
      pkg="tf" type="static_transform_publisher" args="0.0 0.0 0.0 0.0 0.0 0.0 1.0 world $(arg robot_name)/odom $(arg update_rate)"/>
  </group>
  <group unless="$(arg use_gazebo)">
    <!-- send fake joint values if gazebo is not running (e.g. positions come from SLAM or real odometry)-->
    <!-- NOTE: The two continuous wheel joints are set to 'fixed' if Gazebo does not run, which makes joint_state_publisher unnecessary
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen">
      <param name="use_gui" value="false"/>
      <param name="rate" type="double" value="$(arg update_rate)"/>
    </node>
    -->
  </group>

  <!--Send fixed joint states to /tf_static and anything from topic /joint_states to /tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="$(arg update_rate)"/>
    <param name="tf_prefix" type="string" value="$(arg robot_name)"/>
    <param name="robot_description" type="string" value="robot_description"/>
  </node>
  
  <!-- Mockup for floor proximity sensors -->
  <group if="$(arg enable_proximity_floor_mockup)">
    <node name="proximity_floor_mockup" pkg="sensor_mockup" type="proximity_floor_mockup_node" respawn="true">
      <param name="topic_in_suffix" type="string" value="/$(arg robot_name)/proximity_floor_"/>
      <param name="topic_in_prefix" type="string" value="/image_raw"/>
      <param name="topic_out" type="string" value="/$(arg robot_name)/proximity_floor/values"/>
    </node>
  </group>

  <!-- Mockup for ring proximity sensors -->
  <group if="$(arg enable_proximity_ring_mockup)">
    <node name="proximity_ring_mockup" pkg="sensor_mockup" type="proximity_ring_mockup_node" respawn="true">
      <param name="topic_in_suffix" type="string" value="/$(arg robot_name)/proximity_ring_"/>
      <param name="topic_in_prefix" type="string" value="/points"/>
      <param name="topic_out" type="string" value="/$(arg robot_name)/proximity_ring/values"/>
      <param name="max_distance_m" type="double" value="0.25"/>
    </node>

    <!-- Mockup for ring proximity sensors: Tf, so that the point cloud of the depthCamera (s.t. proximity sensor) lies in the optical frame-->
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_0_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_0 $(arg robot_name)/proximity_ring_0_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_1_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_1 $(arg robot_name)/proximity_ring_1_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_2_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_2 $(arg robot_name)/proximity_ring_2_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_3_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_3 $(arg robot_name)/proximity_ring_3_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_4_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_4 $(arg robot_name)/proximity_ring_4_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_5_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_5 $(arg robot_name)/proximity_ring_5_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_6_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_6 $(arg robot_name)/proximity_ring_6_depth_frame $(arg update_rate)"/>
    <node pkg="tf" type="static_transform_publisher" name="proximity_ring_7_tf" args="0 0 0 -1.57 0 -1.57 $(arg robot_name)/proximity_ring_7 $(arg robot_name)/proximity_ring_7_depth_frame $(arg update_rate)"/>
  </group>

  <!-- Mockup for RFID tag reader -->
  <group if="$(arg enable_rfid_mockup)">
    <node name="rfid_mockup" pkg="sensor_mockup" type="rfid_mockup_node" respawn="true" output="screen" >
      <param name="topic_in" type="string" value="/$(arg robot_name)/odom"/>
      <param name="topic_out" type="string" value="/$(arg robot_name)/rfid_tag_list"/>
      <param name="rfid_max_tag_distance_m" type="double" value="$(arg rfid_max_tag_distance_m)"/>
      <rosparam command="load" file="$(arg rfid_yaml_file)" />
    </node>
  </group>

</launch>