<?xml version="1.0"?>
<robot name="amiro" xmlns:xacro="http://www.ros.org/wiki/xacro">
  
  <!-- Constants for robot dimensions -->
  <xacro:property name="PI" value="3.1415926535897931"/>
  <xacro:property name="PI_2" value="${PI / 2}"/>
  <xacro:property name="deg2rad" value="${PI / 180}"/>
  <xacro:property name="base_mass" value="0.4" /> <!-- (kg) base mass -->
  <xacro:property name="base_diameter" value="0.099" /> <!-- (m) base diameter -->
  <xacro:property name="base_radius" value="${base_diameter / 2}" /> <!-- (m) base radius -->
  <xacro:property name="base_height" value="0.084" /> <!-- (m) base height from bottom of DiWheelDrive + extension + lid -->
  <xacro:property name="base_clearance" value="0.01" /> <!-- (m) space between floor and base -->
  <xacro:property name="wheel_height" value="0.006" /> <!-- (m) wheel height -->
  <xacro:property name="wheel_sep" value="0.069" /> <!-- (m) wheel seperation -->
  <xacro:property name="wheel_dia" value="0.05571" /> <!-- (m) wheel diameter -->
  <xacro:property name="wheel_radius" value="${wheel_dia / 2}" /> <!-- (m) wheel radius -->
  <xacro:property name="wheel_mass" value="0.02" /> <!-- (kg) wheel mass -->
  <xacro:property name="wheel_damping" value="0.1" /> <!-- (?) wheel damping -->
  <xacro:property name="caster_mass" value="0.01" /> <!-- (kg) caster mass -->
  <xacro:property name="caster_dia" value="0.005" /> <!-- (m) caster diameter -->
  <xacro:property name="caster_radius" value="${caster_dia / 2}" /> <!-- (m) caster radius -->
  <xacro:property name="caster_clearance" value="0.001" /> <!-- (m) caster clearance above ground (needed, so that the robot is movable) -->
  <xacro:property name="caster_sep" value="0.072" /> <!-- (m) caster seperation (we assume that there are two symetric caster in the front and back) -->

  <!-- Use CAD mesh model or the primitive one -->
  <xacro:property name="use_mesh_model" value="$(arg use_mesh_model)"/>
  <xacro:property name="mesh_scale" value="0.0254"/>
  <xacro:property name="mesh_clearance" value="${base_clearance + 0.002}" />

  <!-- Decide if the joints are controlled by Gazebo or just fixed if Gazebo is not used -->
  <xacro:property name="use_gazebo" value="$(arg use_gazebo)"/>
  <xacro:if value="${use_gazebo}">
    <xacro:property name="joint_types" value="continuous"/>
  </xacro:if>
  <xacro:unless value="${use_gazebo}">
    <xacro:property name="joint_types" value="fixed"/>
  </xacro:unless>

  <!-- Constant dependent parameters -->
  <xacro:property name="base_link_height" value="${base_clearance + base_height / 2}" /> <!-- base link height -->
  <xacro:property name="caster_link_height" value="${caster_clearance + caster_radius}" /> <!-- caster link height -->
  <xacro:property name="lid_link_height" value="${base_clearance + base_height}" /> <!-- top of lid from base_link -->
  <xacro:property name="camera_link_height" value="${base_clearance + 0.032}" /> <!-- camera height from base_link -->
  <xacro:property name="camera_link_depth" value="${base_radius}" /> <!-- camera height from base_link -->
  <xacro:property name="proximity_floor_z" value="${base_clearance}" /> <!-- Proximity floor sensor over ground -->
  <xacro:property name="proximity_floor_x_0" value="${base_radius - 0.005}" />
  <xacro:property name="proximity_floor_y_0" value="-0.0035" />
  <xacro:property name="proximity_floor_x_1" value="${base_radius - 0.021}" />
  <xacro:property name="proximity_floor_y_1" value="-0.032" />
  <xacro:property name="proximity_floor_x_2" value="${base_radius - 0.021}" />
  <xacro:property name="proximity_floor_y_2" value="0.032" />
  <xacro:property name="proximity_floor_x_3" value="${base_radius - 0.005}" />
  <xacro:property name="proximity_floor_y_3" value="0.0035" />
  <xacro:property name="proximity_ring_z" value="${0.027 + base_clearance}" /> <!-- Proximity ring sensor over ground -->
  <xacro:property name="proximity_ring_yaw_3" value="${ 22.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_2" value="${ 67.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_1" value="${112.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_0" value="${157.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_7" value="${202.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_6" value="${247.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_5" value="${292.5 * deg2rad}" />
  <xacro:property name="proximity_ring_yaw_4" value="${337.5 * deg2rad}" />
  <xacro:property name="proximity_ring_x_0" value="${base_radius * cos(proximity_ring_yaw_0)}" />
  <xacro:property name="proximity_ring_y_0" value="${base_radius * sin(proximity_ring_yaw_0)}" />
  <xacro:property name="proximity_ring_x_1" value="${base_radius * cos(proximity_ring_yaw_1)}" />
  <xacro:property name="proximity_ring_y_1" value="${base_radius * sin(proximity_ring_yaw_1)}" />
  <xacro:property name="proximity_ring_x_2" value="${base_radius * cos(proximity_ring_yaw_2)}" />
  <xacro:property name="proximity_ring_y_2" value="${base_radius * sin(proximity_ring_yaw_2)}" />
  <xacro:property name="proximity_ring_x_3" value="${base_radius * cos(proximity_ring_yaw_3)}" />
  <xacro:property name="proximity_ring_y_3" value="${base_radius * sin(proximity_ring_yaw_3)}" />
  <xacro:property name="proximity_ring_x_4" value="${base_radius * cos(proximity_ring_yaw_4)}" />
  <xacro:property name="proximity_ring_y_4" value="${base_radius * sin(proximity_ring_yaw_4)}" />
  <xacro:property name="proximity_ring_x_5" value="${base_radius * cos(proximity_ring_yaw_5)}" />
  <xacro:property name="proximity_ring_y_5" value="${base_radius * sin(proximity_ring_yaw_5)}" />
  <xacro:property name="proximity_ring_x_6" value="${base_radius * cos(proximity_ring_yaw_6)}" />
  <xacro:property name="proximity_ring_y_6" value="${base_radius * sin(proximity_ring_yaw_6)}" />
  <xacro:property name="proximity_ring_x_7" value="${base_radius * cos(proximity_ring_yaw_7)}" />
  <xacro:property name="proximity_ring_y_7" value="${base_radius * sin(proximity_ring_yaw_7)}" />
  <!-- http://en.wikipedia.org/wiki/List_of_moment_of_inertia_tensors -->
  <xacro:property name="base_ixx" value="${1/12 * base_mass * (3*base_radius*base_radius+base_height*base_height)}" />
  <xacro:property name="base_iyy" value="${base_ixx}" />
  <xacro:property name="base_izz" value="${1/2*base_mass*base_radius*base_radius}" />
  <xacro:property name="wheel_ixx" value="${1/12 * wheel_mass * (3*wheel_radius*wheel_radius+wheel_height*wheel_height)}" />
  <xacro:property name="wheel_iyy" value="${wheel_ixx}" />
  <xacro:property name="wheel_izz" value="${1/2*wheel_mass*wheel_radius*wheel_radius}" />
  <xacro:property name="caster_i" value="${2/5*caster_mass*caster_radius*caster_radius}" />

  
  <!-- Link, topic and other names -->
  <xacro:property name="base_link" value="base_link" /> <!-- base link -->
  <xacro:property name="left_wheel_link" value="left_wheel_link" /> <!-- wheel link -->
  <xacro:property name="right_wheel_link" value="right_wheel_link" /> <!-- wheel link -->
  <xacro:property name="right_wheel_joint" value="right_wheel_joint" /> <!-- wheel joint -->
  <xacro:property name="left_wheel_joint" value="left_wheel_joint" /> <!-- wheel joint -->
  <xacro:property name="odom" value="odom" /> <!-- odometry topic/tf -->
  <xacro:property name="cmd_vel" value="cmd_vel" /> <!-- differential command  topic -->

  <xacro:property name="update_rate" value="$(arg update_rate)" /> <!-- update rate for the plugins and TFs -->
  
  <!-- Import Rviz colors -->
  <xacro:include filename="$(find amiro_description)/urdf/materials.xacro" />
  <!-- Import all Gazebo-customization elements, including Gazebo colors -->
  <xacro:include filename="$(find amiro_description)/urdf/amiro.gazebo" />

  <!-- Base Link -->
  <link name="${base_link}">
    <!-- Base -->
    <collision name='base_collision'>
      <origin xyz="0 0 ${base_link_height}" rpy="0 0 0"/>
      <geometry>
        <cylinder length="${base_height}" radius="${base_radius}"/>
      </geometry>
    </collision>

    <visual name='base_visual'>
      <xacro:if value="${use_mesh_model}">
        <origin xyz="${base_radius} -${base_radius} ${mesh_clearance}" rpy="0 0 ${PI/2}"/>
        <geometry>
<!--         <mesh filename="package://amiro_description/meshes/laser/hokuyo.dae"/> -->
<!--         <mesh filename="package://amiro_description/meshes/robot/WheelDrive_degenerateDissolve_cleanUpGeometry002.dae"/> -->
<!--         <mesh filename="package://amiro_description/meshes/robot/ExtendedAmiro_degenerateDissolve_cleanUpGeometry004.dae"/> -->
<!--         <mesh filename="package://amiro_description/meshes/robot/BaseAmiroOnly_degenerateDissolve_cleanUpGeometry005.dae" scale="${mesh_scale} ${mesh_scale} ${mesh_scale}"/> -->
          <mesh filename="package://amiro_description/meshes/robot/ExtendedAmiroOnly_degenerateDissolve_cleanUpGeometry005.dae" scale="${mesh_scale} ${mesh_scale} ${mesh_scale}"/>
        </geometry>
      </xacro:if>
      <xacro:unless value="${use_mesh_model}">
        <origin xyz="0 0 ${base_link_height}" rpy="0 0 0"/>
        <geometry>
          <cylinder length="${base_height}" radius="${base_radius}"/>
        </geometry>
        <material name="orange"/>
      </xacro:unless>
    </visual>

  </link>

  <!-- Dummy joint, so that the root link has no inertia -->
  <joint name="base_inertia_joint" type="fixed">
    <parent link="${base_link}"/>
    <child link="base_inertia_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <axis xyz="1 1 1"/>
    <dynamics damping="0.0"/>
  </joint>
  
  <!-- Dummy link, so that the root link has no inertia -->
  <link name="base_inertia_link">
    <inertial name='base_inertia'>
      <origin xyz="0 0 ${base_link_height}" rpy="0 0 0"/>
      <mass value="${base_mass}"/>
      <inertia
        ixx="${base_ixx}" ixy="0.0" ixz="0.0"
        iyy="${base_iyy}" iyz="0.0"
        izz="${base_izz}"/>
    </inertial>
  </link>
  
  <!-- Front caster joint -->
  <joint name="front_caster_joint" type="fixed">
    <parent link="${base_link}"/>
    <child link="front_caster_link"/>
    <origin xyz="${caster_sep / 2} 0 ${caster_link_height}" rpy="0 0 0"/>
    <axis xyz="1 1 1"/>
    <dynamics damping="0.0"/>
  </joint>

  <!-- Front caster link -->
  <link name="front_caster_link">
    <collision name='caster_front_collision'>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>

    <xacro:unless value="${use_mesh_model}">
      <visual name='caster_front_visual'>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="${caster_radius}"/>
        </geometry>
        <material name="orange"/>
      </visual>
    </xacro:unless>

    <inertial name='caster_front_inertia'>
      <origin xyz="0 0 0" rpy="0 0 0"/>
       <inertia
        ixx="${caster_i}" ixy="0.0" ixz="0.0"
        iyy="${caster_i}" iyz="0.0"
        izz="${caster_i}"/>
      <mass value="${caster_mass}"/>
    </inertial>
  </link>

  <!-- Back caster joint -->
  <joint name="back_caster_joint" type="fixed">
    <parent link="${base_link}"/>
    <child link="back_caster_link"/>
    <origin xyz="-${caster_sep / 2} 0 ${caster_link_height}" rpy="0 0 0"/>
    <axis xyz="1 1 1"/>
    <dynamics damping="0.0"/>
  </joint>

  <!-- Back caster link -->
  <link name="back_caster_link">
    <collision name='caster_back_collision'>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <sphere radius="${caster_radius}"/>
      </geometry>
    </collision>

    <xacro:unless value="${use_mesh_model}">
      <visual name='caster_back_visual'>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <sphere radius="${caster_radius}"/>
        </geometry>
        <material name="orange"/>
      </visual>
    </xacro:unless>

    <inertial name='caster_back_inertia'>
      <origin xyz="0 0 0" rpy="0 0 0"/>
       <inertia
        ixx="${caster_i}" ixy="0.0" ixz="0.0"
        iyy="${caster_i}" iyz="0.0"
        izz="${caster_i}"/>
      <mass value="${caster_mass}"/>
    </inertial>
  </link>

  <!-- Left wheel -->
  <joint name="${left_wheel_joint}" type="${joint_types}">
    <parent link="${base_link}"/>
    <child link="${left_wheel_link}"/>
    <origin xyz="0 ${wheel_sep / 2} ${wheel_radius}" rpy="0 ${PI/2} ${PI/2}"/>
    <axis xyz="0 0 1"/>
    <dynamics damping="${wheel_damping}"/>
  </joint>

  <link name="${left_wheel_link}">
    <collision>
      <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      <geometry>
        <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      </geometry>
    </collision>

    <visual>
      <xacro:if value="${use_mesh_model}">
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <mesh filename="package://amiro_description/meshes/robot/WheelDrive_degenerateDissolve_cleanUpGeometry002_centered.dae" scale="${mesh_scale} ${mesh_scale} ${mesh_scale}"/>
        </geometry>
      </xacro:if>
      <xacro:unless value="${use_mesh_model}">
        <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
        <geometry>
          <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
        </geometry>
        <material name="black"/>
      </xacro:unless>
    </visual>

    <inertial>
      <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      <mass value="${wheel_mass}"/>
      <inertia
        ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
        iyy="${wheel_iyy}" iyz="0.0"
        izz="${wheel_izz}"/>
    </inertial>
  </link>

  <!-- Right wheel -->
  <joint name="${right_wheel_joint}" type="${joint_types}">
    <parent link="${base_link}"/>
    <child link="${right_wheel_link}"/>
    <origin xyz="0 -${wheel_sep / 2} ${wheel_radius}" rpy="0 ${PI/2} ${PI/2}"/>
    <axis xyz="0 0 1"/>
    <dynamics damping="${wheel_damping}"/>
  </joint>

  <link name="${right_wheel_link}">
    <collision>
      <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      <geometry>
        <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      </geometry>
    </collision>

    <visual>
      <xacro:if value="${use_mesh_model}">
        <origin xyz="0 0 0" rpy="${PI/2} 0 0"/>
        <geometry>
          <mesh filename="package://amiro_description/meshes/robot/WheelDrive_degenerateDissolve_cleanUpGeometry002_centered.dae" scale="${mesh_scale} ${mesh_scale} ${mesh_scale}"/>
        </geometry>
      </xacro:if>
      <xacro:unless value="${use_mesh_model}">
        <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
        <geometry>
          <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
        </geometry>
        <material name="black"/>
      </xacro:unless>
    </visual>

    <inertial>
      <cylinder length="${wheel_height}" radius="${wheel_radius}"/>
      <mass value="${wheel_mass}"/>
      <inertia
        ixx="${wheel_ixx}" ixy="0.0" ixz="0.0"
        iyy="${wheel_iyy}" iyz="0.0"
        izz="${wheel_izz}"/>
    </inertial>
  </link>

</robot>
